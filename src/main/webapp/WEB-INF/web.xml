<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">

    <!--
       This is for debugging OAuth 1 code. Make sure before starting up the server that this replaces the current web.xml
       then you need to
       * Change the pom.xml file top point to the OAuth1 libraries
       * make sure the client/server configurations are the right ones you want
       * deploy these to /client and /oauth.
    -->
    <display-name>The MyProxy Delegation Service for Shibboleth</display-name>
    <!--what gets put in the browser's title bar -->
    <servlet>
        <servlet-name>initiate</servlet-name>
          <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.InitServlet</servlet-class>
          <!-- previously servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.loader.edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.InitServlet</servlet-class -->
          <!-- oauth2 sample web.xml has servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.InitServlet</servlet-class -->
    </servlet>
    <servlet-mapping>
        <servlet-name>initiate</servlet-name>
        <url-pattern>/initiate</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>accessToken</servlet-name>
                <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.AccessTokenServlet</servlet-class>
                <!-- previously servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.loader.edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.AccessTokenServlet</servlet-class -->
                <!-- oauth2 sample web.xml has servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.AccessTokenServlet</servlet-class -->
        <load-on-startup>0</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>accessToken</servlet-name>
        <url-pattern>/token</url-pattern>
    </servlet-mapping>


    <servlet>
        <servlet-name>getCert</servlet-name>
        <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.CServlet2</servlet-class>
        <!-- previously servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.loader.edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.ACS2Impl</servlet-class -->
        <!-- oauth2 sample web.xml has servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.CServlet2</servlet-class -->

    </servlet>
    <servlet-mapping>
        <servlet-name>getCert</servlet-name>
        <url-pattern>/getcert</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>error</servlet-name>
        <!-- unchanged -->
        <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.ErrorServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>error</servlet-name>
        <url-pattern>/error</url-pattern>
    </servlet-mapping>


    <servlet>
        <servlet-name>authorize</servlet-name>
        <!-- this class extends OA2AuthorizationServlet -->
        <servlet-class>nz.ac.tuakiri.myproxy.oa4mp.loader.edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.ShibAAS2Impl</servlet-class>
<!-- previously
        <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.loader.edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.AuthorizationServlet</servlet-class>
        <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.AAS2Impl</servlet-class>
-->
        <!-- oauth2 sample web.xml has servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.AuthServer2</servlet-class>
             But the class is not in the 3.2.1 API http://grid.ncsa.illinois.edu/myproxy/oauth/apidocs/
        -->

    </servlet>
    <servlet-mapping>
        <servlet-name>authorize</servlet-name>
        <url-pattern>/authorize</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>clientVetting</servlet-name>
        <!-- unchanged -->
        <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.RegistrationServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>clientVetting</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>

    <!-- New in the OAuth2 sample web.xml and exists in 3.2.1 API -->
    <servlet>
           <servlet-name>userInfo</servlet-name>
           <servlet-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.servlet.UserInfoServlet</servlet-class>
       </servlet>
       <servlet-mapping>
           <servlet-name>userInfo</servlet-name>
           <url-pattern>/userinfo</url-pattern>
       </servlet-mapping>

    <!--
    Uncomment the security constraint section if you are running this server as a stand-alone tomcat
    server. If you access this server via Apache, then do not enable this section.
    -->
  <!-- <security-role>
        <role-name>oa4mp-user</role-name>
    </security-role>
    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>OA4MP Authorization Servlet</realm-name>
    </login-config>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>OA4MP Security</web-resource-name>
            <url-pattern>/authorize</url-pattern>
            <http-method>GET</http-method>
            <http-method>POST</http-method>
        </web-resource-collection>
        <auth-constraint>
            <role-name>oa4mp-user</role-name>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
    </security-constraint>-->

    <resource-ref>
        <description>
            Resource reference to a factory for javax.mail.Session
            instances that may be used for sending electronic mail
            messages, preconfigured to connect to the appropriate
            SMTP server.
        </description>
        <res-ref-name>mail/Session</res-ref-name>
        <res-type>javax.mail.Session</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

    <listener>
        <!-- This class extends OA2Bootstrapper -->
        <listener-class>nz.ac.tuakiri.myproxy.oa4mp.loader.ShibOA4MPBootstrapper</listener-class>
        <!--  oauth2 sample web.xml has listener-class>edu.uiuc.ncsa.myproxy.oa4mp.oauth2.loader.BS2</listener-class -->
        <!-- does not exist the 3.2.1 API http://grid.ncsa.illinois.edu/myproxy/oauth/apidocs/ while OA4MPBootstrapper does -->
    </listener>

    <listener>
        <listener-class>nz.ac.tuakiri.myproxy.oa4mp.loader.BootstrapTest</listener-class>
    </listener>

    <error-page>
        <exception-type>edu.uiuc.ncsa.myproxy.oa4mp.server.servlet.TooManyRequestsException</exception-type>
        <location>/tooManyClientRequests.jsp</location>
    </error-page>


    <!--
    The following two sections are for the new XML based-configuration file format. Use this
     if at all possible. The first gives the complete path to the configuration file.
     -->

    <context-param>
          <param-name>oa4mp:oauth2.server.config.file</param-name>
          <param-value>/opt/oa4mp/oa4mp2-server-cfg.xml</param-value>
      </context-param>

    <!--
       This (optional) parameter tells which named configuration within the file to use. If there
        is only a single configuration, that is used.
    -->
    <!--
    <context-param>
          <param-name>oa4mp:server.config.name</param-name>
          <param-value>name-of-configuration</param-value>
      </context-param>
    -->

</web-app>
